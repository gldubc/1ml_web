type token =
  | TRUE
  | FALSE
  | HOLE
  | PRIMITIVE
  | FUN
  | REC
  | LET
  | LOCAL
  | IN
  | DO
  | WRAP
  | UNWRAP
  | TYPE
  | INCLUDE
  | END
  | IF
  | THEN
  | ELSE
  | OR
  | AND
  | AS
  | EQUAL
  | COLON
  | SEAL
  | ARROW
  | DARROW
  | WITH
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | DOT
  | AT
  | TICK
  | COMMA
  | SEMI
  | EOF
  | NAME of (string)
  | SYM of (string)
  | TEXT of (string)
  | CHAR of (char)
  | NUM of (int)

open Parsing;;
let _ = parse_error;;
# 6 "parser.mly"
open Source
open Syntax

let position_to_pos position =
  { file = position.Lexing.pos_fname;
    line = position.Lexing.pos_lnum;
    column = position.Lexing.pos_cnum - position.Lexing.pos_bol
  }

let positions_to_region position1 position2 =
  { left = position_to_pos position1;
    right = position_to_pos position2
  }

let at () =
  positions_to_region (Parsing.symbol_start_pos ()) (Parsing.symbol_end_pos ())
let ati i =
  positions_to_region (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i)

let parse_error s = raise (Source.Error (Source.nowhere_region, s))
# 69 "parser.ml"
let yytransl_const = [|
  257 (* TRUE *);
  258 (* FALSE *);
  259 (* HOLE *);
  260 (* PRIMITIVE *);
  261 (* FUN *);
  262 (* REC *);
  263 (* LET *);
  264 (* LOCAL *);
  265 (* IN *);
  266 (* DO *);
  267 (* WRAP *);
  268 (* UNWRAP *);
  269 (* TYPE *);
  270 (* INCLUDE *);
  271 (* END *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* OR *);
  276 (* AND *);
  277 (* AS *);
  278 (* EQUAL *);
  279 (* COLON *);
  280 (* SEAL *);
  281 (* ARROW *);
  282 (* DARROW *);
  283 (* WITH *);
  284 (* LPAR *);
  285 (* RPAR *);
  286 (* LBRACE *);
  287 (* RBRACE *);
  288 (* DOT *);
  289 (* AT *);
  290 (* TICK *);
  291 (* COMMA *);
  292 (* SEMI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  293 (* NAME *);
  294 (* SYM *);
  295 (* TEXT *);
  296 (* CHAR *);
  297 (* NUM *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\004\000\003\000\003\000\005\000\005\000\
\006\000\006\000\007\000\007\000\007\000\007\000\007\000\010\000\
\010\000\010\000\010\000\012\000\012\000\009\000\013\000\013\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\018\000\
\018\000\020\000\020\000\020\000\008\000\008\000\008\000\008\000\
\008\000\008\000\016\000\016\000\022\000\022\000\022\000\022\000\
\022\000\022\000\015\000\015\000\015\000\023\000\023\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\026\000\026\000\
\026\000\019\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\030\000\030\000\030\000\030\000\
\030\000\030\000\031\000\031\000\031\000\031\000\031\000\031\000\
\017\000\017\000\017\000\017\000\017\000\017\000\027\000\027\000\
\028\000\028\000\028\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\021\000\021\000\021\000\011\000\
\011\000\011\000\011\000\011\000\036\000\036\000\036\000\037\000\
\037\000\037\000\033\000\033\000\035\000\035\000\038\000\038\000\
\038\000\038\000\038\000\034\000\034\000\034\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\001\000\001\000\005\000\005\000\006\000\005\000\002\000\001\000\
\006\000\005\000\002\000\000\000\002\000\001\000\001\000\001\000\
\002\000\001\000\001\000\003\000\002\000\003\000\004\000\001\000\
\001\000\001\000\008\000\009\000\001\000\003\000\003\000\002\000\
\004\000\004\000\001\000\003\000\004\000\003\000\004\000\005\000\
\002\000\005\000\000\000\001\000\003\000\001\000\001\000\001\000\
\002\000\003\000\003\000\003\000\004\000\004\000\001\000\002\000\
\003\000\001\000\001\000\001\000\002\000\001\000\001\000\001\000\
\003\000\002\000\003\000\003\000\004\000\001\000\002\000\003\000\
\003\000\003\000\004\000\004\000\001\000\002\000\003\000\003\000\
\003\000\002\000\001\000\002\000\003\000\003\000\004\000\004\000\
\001\000\005\000\008\000\006\000\004\000\004\000\001\000\003\000\
\002\000\003\000\003\000\005\000\007\000\006\000\003\000\001\000\
\005\000\002\000\005\000\002\000\000\000\001\000\003\000\001\000\
\003\000\002\000\003\000\005\000\001\000\003\000\003\000\001\000\
\003\000\004\000\001\000\003\000\001\000\003\000\003\000\001\000\
\005\000\003\000\003\000\000\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\144\000\000\000\000\000\125\000\
\000\000\000\000\000\000\128\000\000\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\072\000\071\000\070\000\067\000\
\000\000\116\000\078\000\000\000\000\000\000\000\009\000\120\000\
\000\000\000\000\000\000\114\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
\143\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\092\000\
\032\000\034\000\033\000\000\000\056\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\006\000\000\000\
\123\000\000\000\000\000\000\000\121\000\000\000\025\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\000\126\000\000\000\019\000\000\000\000\000\
\119\000\111\000\000\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\055\000\000\000\023\000\
\024\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\003\000\000\000\001\000\002\000\000\000\000\000\075\000\076\000\
\073\000\082\000\081\000\000\000\080\000\000\000\000\000\000\000\
\093\000\094\000\130\000\000\000\021\000\000\000\134\000\139\000\
\135\000\000\000\142\000\000\000\000\000\030\000\000\000\000\000\
\049\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\000\000\102\000\101\000\095\000\096\000\000\000\
\000\000\000\000\000\000\060\000\059\000\000\000\000\000\038\000\
\000\000\039\000\000\000\058\000\000\000\000\000\077\000\000\000\
\104\000\000\000\107\000\084\000\083\000\113\000\124\000\000\000\
\031\000\044\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\108\000\000\000\000\000\098\000\041\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\061\000\
\000\000\137\000\000\000\000\000\047\000\045\000\018\000\000\000\
\000\000\110\000\012\000\011\000\014\000\000\000\000\000\000\000\
\000\000\000\000\050\000\048\000\017\000\109\000\013\000\000\000\
\008\000\000\000\000\000\000\000\000\000\099\000\000\000\035\000\
\036\000"

let yydgoto = "\002\000\
\013\000\186\000\040\000\094\000\022\001\048\000\095\000\139\000\
\123\000\124\000\016\000\125\000\178\000\097\000\145\000\140\000\
\042\000\098\000\099\000\100\000\017\000\146\000\101\000\102\000\
\043\000\103\000\109\000\110\000\044\000\045\000\046\000\018\000\
\019\000\060\000\057\000\020\000\021\000\061\000"

let yysindex = "\034\000\
\189\003\000\000\000\000\189\003\013\003\003\000\057\255\013\003\
\125\255\003\255\146\255\000\000\000\000\000\000\032\000\000\000\
\063\000\056\255\060\255\000\000\207\255\094\255\000\000\068\255\
\032\000\017\255\189\003\076\003\079\002\079\002\178\003\013\003\
\230\002\189\003\146\255\000\000\000\000\000\000\000\000\000\000\
\076\003\000\000\000\000\098\002\148\000\144\255\000\000\000\000\
\087\255\107\255\032\000\000\000\072\255\000\000\149\255\151\255\
\152\255\072\255\073\255\160\255\163\255\000\000\166\255\000\000\
\129\003\208\255\017\255\017\255\189\255\032\000\000\000\184\255\
\000\000\189\003\013\003\026\000\178\003\189\003\000\000\032\000\
\192\255\215\255\098\002\187\255\233\255\000\000\017\255\189\003\
\178\003\142\003\146\255\241\255\000\000\210\255\239\255\000\000\
\000\000\000\000\000\000\085\000\000\000\082\003\107\255\224\255\
\000\000\147\255\062\003\246\255\198\255\217\255\226\255\090\003\
\090\003\098\002\171\000\000\000\076\003\076\003\076\003\178\003\
\178\003\178\003\254\255\032\000\000\000\032\000\000\000\026\000\
\000\000\032\000\026\000\178\003\000\000\003\255\000\000\013\003\
\000\000\126\000\006\000\005\000\189\003\057\255\178\003\032\000\
\237\255\007\000\000\000\000\000\043\255\000\000\052\000\178\003\
\000\000\000\000\022\000\000\000\038\000\029\000\013\003\013\003\
\178\003\178\003\035\000\040\000\000\000\000\000\057\255\000\000\
\042\000\090\003\090\003\046\255\000\000\000\000\082\003\000\000\
\000\000\178\003\030\000\178\003\219\001\000\000\210\255\013\003\
\000\000\048\000\000\000\000\000\013\003\013\003\000\000\000\000\
\000\000\000\000\000\000\146\255\000\000\098\002\098\002\098\002\
\000\000\000\000\000\000\178\003\000\000\059\000\000\000\000\000\
\000\000\049\000\000\000\065\000\178\003\000\000\109\000\032\000\
\000\000\060\000\000\000\208\255\057\255\097\000\013\003\178\003\
\101\000\000\000\013\003\000\000\000\000\000\000\000\000\178\003\
\178\003\032\000\178\003\000\000\000\000\057\255\111\000\000\000\
\016\255\000\000\146\255\000\000\082\003\125\000\000\000\110\000\
\000\000\113\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\208\255\130\000\013\003\178\003\000\000\129\000\
\149\000\000\000\139\000\013\003\000\000\000\000\000\000\141\000\
\155\000\159\000\153\000\072\255\158\000\032\000\000\000\000\000\
\079\002\000\000\178\000\178\003\000\000\000\000\000\000\167\000\
\013\003\000\000\000\000\000\000\000\000\169\000\032\000\072\255\
\181\000\137\000\000\000\000\000\000\000\000\000\000\000\188\000\
\000\000\013\003\178\003\178\003\182\000\000\000\189\000\000\000\
\000\000"

let yyrindex = "\000\000\
\200\001\000\000\000\000\208\000\000\000\000\000\000\000\000\000\
\000\000\200\000\000\000\000\000\000\000\125\001\225\000\000\000\
\000\000\001\000\000\000\000\000\086\000\000\000\000\000\000\000\
\000\000\000\000\208\000\000\000\000\000\000\000\000\000\000\000\
\000\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\235\000\055\000\195\001\000\000\000\000\
\000\000\000\000\218\000\000\000\000\000\000\000\000\000\227\000\
\000\000\000\000\252\254\000\000\226\000\000\000\000\000\000\000\
\000\000\232\000\000\000\000\000\000\000\238\000\000\000\000\000\
\000\000\015\000\000\000\000\000\000\000\250\000\000\000\241\000\
\000\000\000\000\003\001\000\000\000\000\198\000\000\000\208\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\172\001\000\000\078\000\148\001\000\000\
\000\000\000\000\000\000\240\000\000\000\000\000\000\000\000\000\
\000\000\028\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\253\001\000\000\243\000\000\000\000\000\
\000\000\103\255\000\000\000\000\000\000\200\000\000\000\000\000\
\000\000\000\000\246\000\000\000\208\000\000\000\000\000\105\000\
\000\000\008\255\000\000\000\000\000\000\000\000\000\001\000\000\
\000\000\000\000\215\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\158\002\216\000\032\003\
\000\000\000\000\000\000\000\000\000\000\000\000\115\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\252\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\001\076\001\106\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\121\255\000\000\000\000\000\000\000\000\000\000\082\255\
\000\000\000\000\000\000\086\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\243\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\156\000\000\000\000\000\240\000\
\000\000\255\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\001\006\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\001\218\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\218\000\000\000\
\000\000\205\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\145\255\255\255\164\000\124\255\007\003\000\000\166\002\
\148\255\023\000\191\002\248\255\186\001\008\000\038\255\074\001\
\114\000\000\000\000\000\000\000\024\000\000\000\000\000\179\255\
\189\002\000\000\100\001\101\001\083\000\238\255\000\000\000\000\
\004\000\158\001\168\001\036\002\224\001\000\000"

let yytablesize = 1250
let yytable = "\014\000\
\118\000\007\001\014\000\197\000\047\000\047\000\072\000\047\000\
\059\000\067\000\084\000\085\000\056\000\047\000\117\000\058\000\
\175\000\206\000\068\000\003\000\046\000\208\000\052\000\047\000\
\047\000\014\000\136\000\022\000\020\001\093\000\050\000\136\000\
\014\000\112\000\001\000\218\000\046\000\070\000\052\000\012\000\
\027\001\046\000\113\000\050\000\009\000\003\000\010\000\080\000\
\003\000\047\000\082\000\126\000\012\000\012\000\091\000\221\000\
\130\000\111\000\238\000\003\000\175\000\151\000\073\000\093\000\
\047\000\047\000\047\000\047\000\047\000\244\000\050\000\158\000\
\014\000\050\000\047\000\093\000\014\000\063\000\047\000\012\000\
\036\000\075\000\012\000\036\000\050\000\047\000\014\000\093\000\
\168\000\170\000\047\000\074\000\093\000\012\000\131\000\132\000\
\020\000\153\000\171\000\050\000\051\000\157\000\078\000\020\000\
\187\000\245\000\079\000\004\001\012\000\122\000\083\000\164\000\
\020\000\187\000\064\000\205\000\051\000\020\000\093\000\093\000\
\093\000\052\000\047\000\114\000\047\000\016\001\047\000\003\000\
\047\000\047\000\093\000\056\000\059\000\020\000\209\000\006\000\
\093\000\053\000\020\000\014\000\047\000\093\000\047\000\039\001\
\036\000\104\000\108\000\047\000\062\000\063\000\093\000\138\000\
\009\000\054\000\010\000\065\000\138\000\011\000\064\000\093\000\
\093\000\012\000\036\000\049\001\215\000\047\000\120\000\121\000\
\041\000\041\001\047\000\041\000\055\000\065\000\050\000\066\000\
\093\000\127\000\093\000\187\000\129\000\093\000\012\000\012\000\
\036\000\128\000\048\001\185\000\154\000\114\000\133\000\003\000\
\041\000\041\000\252\000\041\000\107\000\027\000\134\000\198\000\
\199\000\200\000\093\000\253\000\135\000\117\000\118\000\152\000\
\119\000\161\000\003\000\093\000\174\000\055\000\047\000\141\000\
\149\000\159\000\047\000\047\000\142\000\143\000\093\000\160\000\
\036\000\012\000\191\000\076\000\138\000\077\000\093\000\093\000\
\047\000\093\000\085\000\050\000\047\000\050\000\041\000\021\001\
\184\000\023\001\091\000\003\000\012\000\192\000\012\000\119\000\
\119\000\212\000\024\001\117\000\118\000\138\000\047\000\162\000\
\193\000\047\000\090\000\026\001\093\000\003\000\042\001\176\000\
\177\000\118\000\183\000\219\000\172\000\188\000\036\000\118\000\
\228\000\229\000\021\001\204\000\047\000\012\000\188\000\117\000\
\189\000\190\000\093\000\086\000\003\000\117\000\009\000\118\000\
\010\000\214\000\003\000\011\000\006\000\047\000\021\001\012\000\
\213\000\246\000\220\000\041\000\077\000\117\000\248\000\250\000\
\233\000\093\000\093\000\088\000\226\000\009\000\227\000\010\000\
\055\000\241\000\011\000\009\000\232\000\010\000\012\000\091\000\
\235\000\069\000\041\000\041\000\012\000\091\000\000\001\091\000\
\091\000\223\000\224\000\089\000\247\000\091\000\091\000\055\000\
\010\001\005\001\006\001\091\000\013\001\091\000\063\000\255\000\
\188\000\091\000\091\000\041\000\063\000\001\001\063\000\063\000\
\041\000\041\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\087\000\063\000\131\000\063\000\176\000\177\000\179\000\
\063\000\063\000\131\000\063\000\131\000\003\001\029\001\009\001\
\131\000\131\000\012\001\064\000\112\000\034\001\020\000\020\000\
\174\000\064\000\041\000\064\000\064\000\019\001\041\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\025\001\064\000\
\189\000\064\000\046\001\066\000\190\000\064\000\064\000\028\001\
\064\000\050\000\127\000\117\000\118\000\031\001\091\000\051\001\
\033\001\032\001\012\000\053\001\065\000\038\001\117\000\118\000\
\041\000\035\001\065\000\037\000\065\000\065\000\036\000\041\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\036\001\
\065\000\036\000\065\000\037\001\041\000\040\001\065\000\065\000\
\043\001\065\000\097\000\045\001\041\000\047\001\050\000\117\000\
\055\000\055\000\050\001\196\000\100\000\119\000\027\000\012\000\
\036\000\052\001\056\001\185\000\027\000\041\000\027\000\027\000\
\117\000\057\001\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\055\000\027\000\055\000\027\000\055\000\140\000\117\000\
\027\000\027\000\055\000\055\000\055\000\055\000\055\000\020\000\
\026\000\026\000\026\000\085\000\026\000\120\000\120\000\120\000\
\020\000\085\000\026\000\085\000\085\000\085\000\085\000\133\000\
\141\000\085\000\085\000\020\000\020\000\020\000\051\000\085\000\
\117\000\085\000\020\000\090\000\103\000\085\000\085\000\020\000\
\085\000\090\000\043\000\090\000\090\000\090\000\090\000\021\000\
\105\000\090\000\090\000\106\000\051\000\180\000\002\001\090\000\
\249\000\090\000\251\000\211\000\086\000\090\000\090\000\207\000\
\090\000\049\000\086\000\155\000\086\000\086\000\086\000\086\000\
\000\000\000\000\086\000\086\000\000\000\000\000\000\000\000\000\
\086\000\000\000\086\000\000\000\088\000\000\000\086\000\086\000\
\000\000\086\000\088\000\000\000\088\000\088\000\088\000\088\000\
\000\000\000\000\088\000\088\000\000\000\000\000\000\000\000\000\
\088\000\000\000\088\000\000\000\089\000\000\000\088\000\088\000\
\000\000\088\000\089\000\000\000\089\000\089\000\089\000\089\000\
\000\000\000\000\089\000\089\000\000\000\000\000\000\000\000\000\
\089\000\000\000\089\000\000\000\000\000\000\000\089\000\089\000\
\000\000\089\000\087\000\000\000\000\000\000\000\000\000\000\000\
\087\000\000\000\087\000\087\000\087\000\087\000\000\000\009\000\
\087\000\087\000\000\000\000\000\007\000\112\000\087\000\000\000\
\087\000\000\000\000\000\112\000\087\000\087\000\000\000\087\000\
\000\000\009\000\009\000\009\000\009\000\000\000\000\000\007\000\
\009\000\000\000\009\000\112\000\066\000\007\000\009\000\007\000\
\112\000\009\000\066\000\007\000\066\000\066\000\007\000\000\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\066\000\000\000\066\000\000\000\037\000\000\000\066\000\066\000\
\000\000\000\000\037\000\000\000\037\000\037\000\000\000\000\000\
\037\000\037\000\037\000\037\000\096\000\000\000\000\000\000\000\
\037\000\000\000\037\000\097\000\000\000\071\000\037\000\037\000\
\000\000\097\000\000\000\097\000\097\000\100\000\000\000\071\000\
\081\000\000\000\000\000\100\000\000\000\100\000\100\000\097\000\
\000\000\097\000\000\000\000\000\000\000\097\000\097\000\000\000\
\116\000\100\000\000\000\100\000\132\000\000\000\000\000\100\000\
\100\000\071\000\156\000\132\000\000\000\132\000\050\000\000\000\
\000\000\132\000\132\000\243\000\000\000\000\000\165\000\012\000\
\036\000\147\000\148\000\185\000\071\000\000\000\000\000\015\000\
\000\000\000\000\015\000\020\000\000\000\051\000\071\000\116\000\
\000\000\000\000\020\000\020\000\020\000\163\000\020\000\000\000\
\000\000\020\000\000\000\020\000\000\000\201\000\202\000\203\000\
\020\000\015\000\182\000\000\000\000\000\000\000\000\000\000\000\
\015\000\210\000\000\000\000\000\194\000\195\000\116\000\000\000\
\000\000\000\000\000\000\000\000\217\000\000\000\000\000\000\000\
\000\000\000\000\071\000\000\000\071\000\225\000\000\000\000\000\
\071\000\000\000\000\000\000\000\000\000\000\000\230\000\231\000\
\144\000\000\000\000\000\150\000\000\000\000\000\071\000\000\000\
\015\000\023\000\024\000\000\000\015\000\000\000\000\000\240\000\
\028\000\242\000\000\000\000\000\000\000\000\000\015\000\000\000\
\169\000\000\000\173\000\000\000\023\000\024\000\236\000\237\000\
\000\000\000\000\033\000\182\000\034\000\000\000\000\000\035\000\
\000\000\254\000\000\000\012\000\036\000\037\000\038\000\039\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\034\000\
\000\000\115\000\116\000\116\000\116\000\011\001\012\000\000\000\
\037\000\038\000\039\000\000\000\000\000\014\001\015\001\000\000\
\017\001\000\000\000\000\015\000\216\000\000\000\071\000\000\000\
\000\000\000\000\000\000\222\000\000\000\000\000\000\000\000\000\
\055\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\030\001\000\000\234\000\000\000\000\000\
\000\000\182\000\239\000\000\000\010\000\000\000\027\000\027\000\
\027\000\055\000\027\000\055\000\000\000\055\000\000\000\000\000\
\027\000\044\001\055\000\055\000\055\000\055\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\000\000\000\000\
\054\001\055\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\144\000\008\001\000\000\071\000\000\000\000\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\028\000\
\029\000\030\000\031\000\000\000\018\001\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\105\000\034\000\000\000\106\000\035\000\000\000\
\000\000\144\000\012\000\036\000\037\000\038\000\039\000\023\000\
\024\000\025\000\026\000\027\000\000\000\000\000\028\000\029\000\
\030\000\031\000\000\000\000\000\032\000\000\000\000\000\000\000\
\000\000\000\000\054\000\054\000\000\000\000\000\000\000\000\000\
\033\000\000\000\034\000\000\000\000\000\035\000\000\000\000\000\
\000\000\012\000\036\000\037\000\038\000\039\000\009\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\054\000\
\023\000\024\000\054\000\000\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\023\000\024\000\000\000\000\000\
\000\000\033\000\127\000\034\000\023\000\024\000\035\000\000\000\
\000\000\000\000\012\000\000\000\037\000\038\000\039\000\033\000\
\000\000\034\000\000\000\000\000\035\000\033\000\000\000\034\000\
\012\000\181\000\037\000\038\000\039\000\033\000\012\000\034\000\
\037\000\038\000\039\000\000\000\000\000\000\000\012\000\000\000\
\037\000\038\000\039\000\086\000\063\000\000\000\087\000\088\000\
\000\000\000\000\000\000\089\000\000\000\064\000\000\000\000\000\
\166\000\063\000\000\000\087\000\088\000\000\000\136\000\000\000\
\089\000\000\000\167\000\000\000\090\000\137\000\066\000\000\000\
\000\000\091\000\092\000\136\000\000\000\012\000\036\000\000\000\
\000\000\090\000\137\000\066\000\000\000\000\000\091\000\092\000\
\000\000\000\000\012\000\036\000\086\000\063\000\000\000\087\000\
\088\000\000\000\000\000\000\000\089\000\000\000\064\000\003\000\
\000\000\000\000\000\000\000\000\004\000\000\000\005\000\006\000\
\000\000\007\000\008\000\000\000\000\000\090\000\000\000\066\000\
\000\000\000\000\091\000\092\000\000\000\000\000\012\000\036\000\
\009\000\000\000\010\000\000\000\000\000\011\000\000\000\000\000\
\000\000\012\000"

let yycheck = "\001\000\
\000\000\220\000\004\000\115\000\006\000\007\000\015\000\009\000\
\010\000\011\000\029\000\030\000\009\000\015\000\000\000\013\001\
\094\000\126\000\011\000\003\001\015\001\130\000\015\001\025\000\
\026\000\027\000\031\001\004\000\013\001\031\000\028\001\036\001\
\034\000\035\000\001\000\144\000\031\001\015\000\031\001\037\001\
\003\001\036\001\035\000\028\001\028\001\003\001\030\001\025\000\
\003\001\051\000\027\000\053\000\037\001\037\001\000\000\013\001\
\058\000\034\000\013\001\003\001\138\000\070\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\181\000\028\001\080\000\
\074\000\028\001\076\000\077\000\078\000\000\000\080\000\037\001\
\038\001\022\001\037\001\038\001\028\001\087\000\088\000\089\000\
\090\000\091\000\092\000\036\001\094\000\037\001\022\001\023\001\
\015\001\074\000\091\000\028\001\015\001\078\000\009\001\022\001\
\106\000\183\000\039\001\216\000\037\001\023\001\028\000\088\000\
\031\001\115\000\000\000\124\000\031\001\036\001\120\000\121\000\
\122\000\008\000\124\000\041\000\126\000\234\000\128\000\003\001\
\130\000\131\000\132\000\128\000\134\000\031\001\131\000\011\001\
\138\000\013\001\036\001\141\000\142\000\143\000\144\000\020\001\
\038\001\032\000\033\000\149\000\003\001\004\001\152\000\031\001\
\028\001\029\001\030\001\000\000\036\001\033\001\013\001\161\000\
\162\000\037\001\038\001\040\001\141\000\167\000\023\001\024\001\
\005\000\022\001\172\000\008\000\009\000\028\001\028\001\030\001\
\178\000\029\001\180\000\181\000\029\001\183\000\037\001\037\001\
\038\001\035\001\039\001\041\001\075\000\107\000\031\001\003\001\
\029\000\030\000\196\000\032\000\033\000\000\000\036\001\117\000\
\118\000\119\000\204\000\196\000\039\001\019\001\020\001\024\001\
\045\000\023\001\003\001\213\000\003\001\050\000\216\000\008\001\
\028\001\026\001\220\000\221\000\013\001\014\001\224\000\009\001\
\038\001\037\001\029\001\021\001\065\000\023\001\232\000\233\000\
\234\000\235\000\000\000\028\001\238\000\028\001\075\000\241\000\
\017\001\243\000\033\001\003\001\037\001\029\001\037\001\084\000\
\085\000\136\000\243\000\019\001\020\001\090\000\000\001\023\001\
\031\001\003\001\000\000\000\001\006\001\003\001\025\001\025\001\
\026\001\009\001\103\000\031\001\028\001\106\000\038\001\015\001\
\159\000\160\000\020\001\022\001\022\001\037\001\115\000\009\001\
\035\001\036\001\028\001\000\000\003\001\015\001\028\001\031\001\
\030\001\029\001\003\001\033\001\011\001\039\001\040\001\037\001\
\035\001\184\000\036\001\136\000\023\001\031\001\189\000\190\000\
\009\001\051\001\052\001\000\000\015\001\028\001\026\001\030\001\
\149\000\028\001\033\001\028\001\026\001\030\001\037\001\009\001\
\023\001\034\001\159\000\160\000\037\001\015\001\022\001\017\001\
\018\001\022\001\023\001\000\000\029\001\023\001\024\001\172\000\
\223\000\022\001\023\001\029\001\227\000\031\001\009\001\029\001\
\181\000\035\001\036\001\184\000\015\001\029\001\017\001\018\001\
\189\000\190\000\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\000\000\029\001\022\001\031\001\025\001\026\001\027\001\
\035\001\036\001\029\001\038\001\031\001\009\001\005\001\023\001\
\035\001\036\001\022\001\009\001\000\000\012\001\022\001\023\001\
\003\001\015\001\223\000\017\001\018\001\023\001\227\000\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\018\001\029\001\
\035\001\031\001\033\001\000\000\036\001\035\001\036\001\022\001\
\038\001\028\001\029\001\019\001\020\001\029\001\033\001\023\001\
\022\001\013\001\037\001\050\001\009\001\013\001\019\001\020\001\
\005\001\029\001\015\001\000\000\017\001\018\001\038\001\012\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\029\001\
\029\001\038\001\031\001\029\001\025\001\032\001\035\001\036\001\
\015\001\038\001\000\000\029\001\033\001\029\001\028\001\000\000\
\003\001\004\001\022\001\033\001\000\000\042\001\009\001\037\001\
\038\001\022\001\029\001\041\001\015\001\050\001\017\001\018\001\
\009\001\029\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\031\001\031\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\022\001\
\025\001\026\001\027\001\009\001\029\001\021\001\022\001\023\001\
\024\001\015\001\035\001\017\001\018\001\019\001\020\001\029\001\
\031\001\023\001\024\001\022\001\023\001\024\001\031\001\029\001\
\015\001\031\001\026\001\009\001\029\001\035\001\036\001\029\001\
\038\001\015\001\029\001\017\001\018\001\019\001\020\001\024\001\
\029\001\023\001\024\001\029\001\015\001\100\000\213\000\029\001\
\189\000\031\001\190\000\134\000\009\001\035\001\036\001\128\000\
\038\001\006\000\015\001\076\000\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\009\001\255\255\035\001\036\001\
\255\255\038\001\015\001\255\255\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\009\001\255\255\035\001\036\001\
\255\255\038\001\015\001\255\255\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\255\255\255\255\035\001\036\001\
\255\255\038\001\009\001\255\255\255\255\255\255\255\255\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\255\255\003\001\
\023\001\024\001\255\255\255\255\003\001\009\001\029\001\255\255\
\031\001\255\255\255\255\015\001\035\001\036\001\255\255\038\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\022\001\
\028\001\255\255\030\001\031\001\009\001\028\001\034\001\030\001\
\036\001\037\001\015\001\034\001\017\001\018\001\037\001\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\255\255\031\001\255\255\009\001\255\255\035\001\036\001\
\255\255\255\255\015\001\255\255\017\001\018\001\255\255\255\255\
\021\001\022\001\023\001\024\001\031\000\255\255\255\255\255\255\
\029\001\255\255\031\001\009\001\255\255\015\000\035\001\036\001\
\255\255\015\001\255\255\017\001\018\001\009\001\255\255\025\000\
\026\000\255\255\255\255\015\001\255\255\017\001\018\001\029\001\
\255\255\031\001\255\255\255\255\255\255\035\001\036\001\255\255\
\044\000\029\001\255\255\031\001\022\001\255\255\255\255\035\001\
\036\001\051\000\077\000\029\001\255\255\031\001\028\001\255\255\
\255\255\035\001\036\001\033\001\255\255\255\255\089\000\037\001\
\038\001\067\000\068\000\041\001\070\000\255\255\255\255\001\000\
\255\255\255\255\004\000\015\001\255\255\007\000\080\000\083\000\
\255\255\255\255\022\001\023\001\024\001\087\000\026\001\255\255\
\255\255\029\001\255\255\031\001\255\255\120\000\121\000\122\000\
\036\001\027\000\102\000\255\255\255\255\255\255\255\255\255\255\
\034\000\132\000\255\255\255\255\112\000\113\000\114\000\255\255\
\255\255\255\255\255\255\255\255\143\000\255\255\255\255\255\255\
\255\255\255\255\124\000\255\255\126\000\152\000\255\255\255\255\
\130\000\255\255\255\255\255\255\255\255\255\255\161\000\162\000\
\066\000\255\255\255\255\069\000\255\255\255\255\144\000\255\255\
\074\000\003\001\004\001\255\255\078\000\255\255\255\255\178\000\
\010\001\180\000\255\255\255\255\255\255\255\255\088\000\255\255\
\090\000\255\255\092\000\255\255\003\001\004\001\170\000\171\000\
\255\255\255\255\028\001\175\000\030\001\255\255\255\255\033\001\
\255\255\204\000\255\255\037\001\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\030\001\
\255\255\032\001\198\000\199\000\200\000\224\000\037\001\255\255\
\039\001\040\001\041\001\255\255\255\255\232\000\233\000\255\255\
\235\000\255\255\255\255\141\000\142\000\255\255\216\000\255\255\
\255\255\255\255\255\255\149\000\255\255\255\255\255\255\255\255\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\234\000\255\255\255\255\006\001\255\255\167\000\255\255\255\255\
\255\255\245\000\172\000\255\255\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\255\255\255\255\
\035\001\028\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\220\000\221\000\255\255\039\001\255\255\255\255\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\238\000\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\255\255\032\001\033\001\255\255\
\255\255\003\001\037\001\038\001\039\001\040\001\041\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\255\255\255\255\255\255\
\255\255\255\255\003\001\004\001\255\255\255\255\255\255\255\255\
\028\001\255\255\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\003\001\004\001\035\001\255\255\037\001\038\001\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\003\001\004\001\
\255\255\255\255\255\255\255\255\003\001\004\001\255\255\255\255\
\255\255\028\001\029\001\030\001\003\001\004\001\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\028\001\
\255\255\030\001\255\255\255\255\033\001\028\001\255\255\030\001\
\037\001\032\001\039\001\040\001\041\001\028\001\037\001\030\001\
\039\001\040\001\041\001\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\003\001\004\001\255\255\006\001\007\001\
\255\255\255\255\255\255\011\001\255\255\013\001\255\255\255\255\
\003\001\004\001\255\255\006\001\007\001\255\255\022\001\255\255\
\011\001\255\255\013\001\255\255\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\022\001\255\255\037\001\038\001\255\255\
\255\255\028\001\029\001\030\001\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\038\001\003\001\004\001\255\255\006\001\
\007\001\255\255\255\255\255\255\011\001\255\255\013\001\003\001\
\255\255\255\255\255\255\255\255\008\001\255\255\010\001\011\001\
\255\255\013\001\014\001\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\033\001\034\001\255\255\255\255\037\001\038\001\
\028\001\255\255\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  HOLE\000\
  PRIMITIVE\000\
  FUN\000\
  REC\000\
  LET\000\
  LOCAL\000\
  IN\000\
  DO\000\
  WRAP\000\
  UNWRAP\000\
  TYPE\000\
  INCLUDE\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  OR\000\
  AND\000\
  AS\000\
  EQUAL\000\
  COLON\000\
  SEAL\000\
  ARROW\000\
  DARROW\000\
  WITH\000\
  LPAR\000\
  RPAR\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  AT\000\
  TICK\000\
  COMMA\000\
  SEMI\000\
  EOF\000\
  "

let yynames_block = "\
  NAME\000\
  SYM\000\
  TEXT\000\
  CHAR\000\
  NUM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 53 "parser.mly"
    ( _1 )
# 672 "parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sym) in
    Obj.repr(
# 55 "parser.mly"
    ( _1 )
# 679 "parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 57 "parser.mly"
    ( index(_1)@@at() )
# 686 "parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
    ( _1@@at() )
# 693 "parser.ml"
               : 'sym))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
    ( _1@@at() )
# 700 "parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sym) in
    Obj.repr(
# 67 "parser.mly"
    ( _2 )
# 707 "parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 71 "parser.mly"
    ( _1::[] )
# 714 "parser.ml"
               : 'namelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'namelist) in
    Obj.repr(
# 73 "parser.mly"
    ( _1::_3 )
# 722 "parser.ml"
               : 'namelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 78 "parser.mly"
    ( _1 )
# 729 "parser.ml"
               : 'head))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
    ( "_"@@at() )
# 735 "parser.ml"
               : 'head))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 84 "parser.mly"
    ( let b, _ = varP(_2) in (b, _4, Expl@@ati 3)@@at() )
# 743 "parser.ml"
               : 'annparam))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'head) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typparamlist) in
    Obj.repr(
# 86 "parser.mly"
    ( let b, _ = varP(_3) in
      (b, funT(_4, TypT@@ati 2, Pure@@ati 2)@@span[ati 2; ati 4],
        Expl@@ati 2)@@at() )
# 753 "parser.ml"
               : 'annparam))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    Obj.repr(
# 90 "parser.mly"
    ( let b, _ = varP(_3) in (b, TypT@@ati 5, Impl@@ati 1)@@at() )
# 760 "parser.ml"
               : 'annparam))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'head) in
    Obj.repr(
# 92 "parser.mly"
    ( let b, _ = varP(_4) in (b, TypT@@ati 3, Impl@@ati 1)@@at() )
# 767 "parser.ml"
               : 'annparam))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'head) in
    Obj.repr(
# 94 "parser.mly"
    ( let b, _ = varP(_2) in (b, TypT@@at(), Impl@@ati 1)@@at() )
# 774 "parser.ml"
               : 'annparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atpat) in
    Obj.repr(
# 98 "parser.mly"
    ( let b, t = (defaultP _1).it in (b, t, Expl@@at())@@at() )
# 781 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    Obj.repr(
# 100 "parser.mly"
    ( let b, _ = varP(_3) in (b, TypT@@ati 5, Impl@@ati 1)@@at() )
# 788 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'head) in
    Obj.repr(
# 102 "parser.mly"
    ( let b, _ = varP(_4) in (b, TypT@@ati 3, Impl@@ati 1)@@at() )
# 795 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'head) in
    Obj.repr(
# 104 "parser.mly"
    ( let b, _ = varP(_2) in (b, TypT@@at(), Impl@@ati 1)@@at() )
# 802 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
    ( [] )
# 808 "parser.ml"
               : 'paramlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paramlist) in
    Obj.repr(
# 110 "parser.mly"
    ( _1::_2 )
# 816 "parser.ml"
               : 'paramlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paramlist) in
    Obj.repr(
# 114 "parser.mly"
    ( List.map (fun p ->
        match p.it with
        | (b, {it = HoleT; at}, i) -> (b, TypT@@at, i)@@p.at
        | _ -> p
      ) _1 )
# 827 "parser.ml"
               : 'typparamlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
    ( Impure@@at() )
# 833 "parser.ml"
               : 'arrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
    ( Pure@@at() )
# 839 "parser.ml"
               : 'arrow))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
    ( PrimT(_2)@@at() )
# 846 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
    ( TypT@@at() )
# 852 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
    ( HoleT@@at() )
# 858 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    Obj.repr(
# 135 "parser.mly"
    ( StrT(_2)@@at() )
# 865 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
    ( StrT(EmptyD@@at())@@at() )
# 871 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typlist) in
    Obj.repr(
# 139 "parser.mly"
    ( match _2 with [t] -> t | ts -> tupT(ts)@@at() )
# 878 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 141 "parser.mly"
    ( EqT(_3)@@at() )
# 885 "parser.ml"
               : 'attyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attyp) in
    Obj.repr(
# 145 "parser.mly"
    ( _1 )
# 892 "parser.ml"
               : 'apptyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathexp) in
    Obj.repr(
# 147 "parser.mly"
    ( PathT(_1)@@at() )
# 899 "parser.ml"
               : 'apptyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apptyp) in
    Obj.repr(
# 151 "parser.mly"
    ( _1 )
# 906 "parser.ml"
               : 'withtyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'withtyp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'namelist) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'typparamlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 153 "parser.mly"
    ( WithT(_1, _4, funE(_5, _7)@@span[ati 5; ati 7])@@at() )
# 916 "parser.ml"
               : 'withtyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'withtyp) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'namelist) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'typparamlist) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 155 "parser.mly"
    ( WithT(_1, _5, funE(_6, TypE(_8)@@ati 8)@@span[ati 6; ati 8])@@at() )
# 926 "parser.ml"
               : 'withtyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'withtyp) in
    Obj.repr(
# 159 "parser.mly"
    ( _1 )
# 933 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annparam) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arrow) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 161 "parser.mly"
    ( funT([_1], _3, _2)@@at() )
# 942 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'withtyp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arrow) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 163 "parser.mly"
    ( let b, _ = varP("_"@@ati 1) in
      funT([(b, _1, Expl@@ati 2)@@ati 1], _3, _2)@@at() )
# 952 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 166 "parser.mly"
    ( WrapT(_2)@@at() )
# 959 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'atpat) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 168 "parser.mly"
    ( recT(defaultTP _2, _4)@@at() )
# 967 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 170 "parser.mly"
    ( letT(_2, _4)@@at() )
# 975 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 174 "parser.mly"
    ( _1::[] )
# 982 "parser.ml"
               : 'typlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typlist) in
    Obj.repr(
# 176 "parser.mly"
    ( _1::_3 )
# 990 "parser.ml"
               : 'typlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typparamlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 181 "parser.mly"
    ( VarD(_1, funT(_2, _4, Pure@@ati 2)@@span[ati 2; ati 4])@@at() )
# 999 "parser.ml"
               : 'atdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'head) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typparamlist) in
    Obj.repr(
# 183 "parser.mly"
    ( VarD(_2, funT(_3, TypT@@ati 1, Pure@@ati 3)@@at())@@at() )
# 1007 "parser.ml"
               : 'atdec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typparamlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 185 "parser.mly"
    ( VarD(_1, funT(_2, EqT(_4)@@ati 4, Pure@@ati 3)@@span[ati 2; ati 4])
        @@at() )
# 1017 "parser.ml"
               : 'atdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typparamlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 188 "parser.mly"
    ( VarD(_2, funT(_3, EqT(TypE(_5)@@ati 5)@@ati 5, Pure@@ati 4)@@at())
        @@at() )
# 1027 "parser.ml"
               : 'atdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 191 "parser.mly"
    ( InclD(_2)@@at() )
# 1034 "parser.ml"
               : 'atdec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    Obj.repr(
# 193 "parser.mly"
    ( letD(_2, _4)@@at() )
# 1042 "parser.ml"
               : 'atdec))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
    ( EmptyD@@at() )
# 1048 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atdec) in
    Obj.repr(
# 203 "parser.mly"
    ( _1 )
# 1055 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atdec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 205 "parser.mly"
    ( SeqD(_1, _3)@@at() )
# 1063 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 210 "parser.mly"
    ( VarE(_1)@@at() )
# 1070 "parser.ml"
               : 'atpathexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parser.mly"
    ( TypE(HoleT@@at())@@at() )
# 1076 "parser.ml"
               : 'atpathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atpathexp) in
    Obj.repr(
# 216 "parser.mly"
    ( _1 )
# 1083 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'apppathexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 218 "parser.mly"
    ( appE(_1, _2)@@at() )
# 1091 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'apppathexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 220 "parser.mly"
    ( DotE(_1, _3)@@at() )
# 1099 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 222 "parser.mly"
    ( rollE(_3, _2)@@at() )
# 1107 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 224 "parser.mly"
    ( rollE(_3, PathT(VarE(_2)@@ati 2)@@ati 2)@@at() )
# 1115 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'apppathexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'attyp) in
    Obj.repr(
# 226 "parser.mly"
    ( unrollE(_1, _4)@@at() )
# 1123 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'apppathexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 228 "parser.mly"
    ( unrollE(_1, PathT(VarE(_4)@@ati 4)@@ati 4)@@at() )
# 1131 "parser.ml"
               : 'apppathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apppathexp) in
    Obj.repr(
# 232 "parser.mly"
    ( _1 )
# 1138 "parser.ml"
               : 'infpathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sym) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apppathexp) in
    Obj.repr(
# 234 "parser.mly"
    ( appE(VarE(_1)@@ati(1), _2)@@at() )
# 1146 "parser.ml"
               : 'infpathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infpathexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sym) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'apppathexp) in
    Obj.repr(
# 236 "parser.mly"
    ( appE(VarE(_2)@@ati(2), tupE[_1; _3]@@at())@@at() )
# 1155 "parser.ml"
               : 'infpathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infpathexp) in
    Obj.repr(
# 240 "parser.mly"
    ( _1 )
# 1162 "parser.ml"
               : 'pathexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 245 "parser.mly"
    ( VarE(_1)@@at() )
# 1169 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "parser.mly"
    ( TypE(HoleT@@at())@@at() )
# 1175 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 249 "parser.mly"
    ( match Prim.fun_of_string _2 with
      | Some f -> PrimE(Prim.FunV f)@@at()
      | None -> parse_error ("unknown primitive \"" ^ _2 ^ "\"") )
# 1184 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 253 "parser.mly"
    ( PrimE(Prim.IntV(_1))@@at() )
# 1191 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 255 "parser.mly"
    ( PrimE(Prim.CharV(_1))@@at() )
# 1198 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 257 "parser.mly"
    ( PrimE(Prim.TextV(_1))@@at() )
# 1205 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bind) in
    Obj.repr(
# 259 "parser.mly"
    ( StrE(_2)@@at() )
# 1212 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "parser.mly"
    ( StrE(EmptyB@@at())@@at() )
# 1218 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'explist) in
    Obj.repr(
# 263 "parser.mly"
    ( match _2 with [e] -> e | es -> tupE(es)@@at() )
# 1225 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expsemilist) in
    Obj.repr(
# 265 "parser.mly"
    ( seqE(_2)@@at() )
# 1232 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'label) in
    Obj.repr(
# 267 "parser.mly"
    ( dotopE(_3)@@at() )
# 1239 "parser.ml"
               : 'atexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 271 "parser.mly"
    ( _1 )
# 1246 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 273 "parser.mly"
    ( appE(_1, _2)@@at() )
# 1254 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'appexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 275 "parser.mly"
    ( DotE(_1, _3)@@at() )
# 1262 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 277 "parser.mly"
    ( rollE(_3, _2)@@at() )
# 1270 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atexp) in
    Obj.repr(
# 279 "parser.mly"
    ( rollE(_3, PathT(VarE(_2)@@ati 2)@@ati 2)@@at() )
# 1278 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'attyp) in
    Obj.repr(
# 281 "parser.mly"
    ( unrollE(_1, _4)@@at() )
# 1286 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'appexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 283 "parser.mly"
    ( unrollE(_1, PathT(VarE(_4)@@ati 4)@@ati 4)@@at() )
# 1294 "parser.ml"
               : 'appexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 287 "parser.mly"
    ( _1 )
# 1301 "parser.ml"
               : 'infexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sym) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 289 "parser.mly"
    ( appE(VarE(_1)@@ati(1), _2)@@at() )
# 1309 "parser.ml"
               : 'infexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sym) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 291 "parser.mly"
    ( appE(VarE(_2)@@ati(2), tupE[_1; _3]@@at())@@at() )
# 1318 "parser.ml"
               : 'infexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 293 "parser.mly"
    ( orE(_1, _3)@@at() )
# 1326 "parser.ml"
               : 'infexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 295 "parser.mly"
    ( andE(_1, _3)@@at() )
# 1334 "parser.ml"
               : 'infexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'appexp) in
    Obj.repr(
# 297 "parser.mly"
    ( doE(_2)@@at() )
# 1341 "parser.ml"
               : 'infexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infexp) in
    Obj.repr(
# 301 "parser.mly"
    ( _1 )
# 1348 "parser.ml"
               : 'annexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 303 "parser.mly"
    ( TypE(_2)@@at() )
# 1355 "parser.ml"
               : 'annexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 305 "parser.mly"
    ( annotE(_1, _3)@@at() )
# 1363 "parser.ml"
               : 'annexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 307 "parser.mly"
    ( sealE(_1, _3)@@at() )
# 1371 "parser.ml"
               : 'annexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'infexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 309 "parser.mly"
    ( wrapE(_2, _4)@@at() )
# 1379 "parser.ml"
               : 'annexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'infexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 311 "parser.mly"
    ( unwrapE(_2, _4)@@at() )
# 1387 "parser.ml"
               : 'annexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annexp) in
    Obj.repr(
# 315 "parser.mly"
    ( _1 )
# 1394 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'paramlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 317 "parser.mly"
    ( funE(_2::_3, _5)@@at() )
# 1403 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'infexp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 319 "parser.mly"
    ( ifE(_2, _4, _6, _8)@@at() )
# 1413 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'infexp) in
    Obj.repr(
# 321 "parser.mly"
    ( ifE(_2, _4, _6, HoleT@@ati 1)@@at() )
# 1422 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 323 "parser.mly"
    ( letE(_2, _4)@@at() )
# 1430 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'atpat) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 325 "parser.mly"
    ( recE(defaultP _2, _4)@@at() )
# 1438 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 329 "parser.mly"
    ( _1::[] )
# 1445 "parser.ml"
               : 'explist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'explist) in
    Obj.repr(
# 331 "parser.mly"
    ( _1::_3 )
# 1453 "parser.ml"
               : 'explist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 335 "parser.mly"
    ( _1::[] )
# 1460 "parser.ml"
               : 'expsemilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 337 "parser.mly"
    ( _1::_3::[] )
# 1468 "parser.ml"
               : 'expsemilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expsemilist) in
    Obj.repr(
# 339 "parser.mly"
    ( _1::_3 )
# 1476 "parser.ml"
               : 'expsemilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'head) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'paramlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 344 "parser.mly"
    ( VarB(_1, funE(_2::_3, _5)@@span[ati 2; ati 5])@@at() )
# 1486 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'head) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'paramlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 346 "parser.mly"
    ( VarB(_1, funE(_2::_3, annotE(_7, _5)@@span[ati 5; ati 7])
        @@span[ati 2; ati 7])@@at() )
# 1498 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'head) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'paramlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 349 "parser.mly"
    ( VarB(_1, funE(_2, sealE(_6, _4)@@span[ati 4; ati 6])
        @@span[ati 2; ati 6])@@at() )
# 1509 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 352 "parser.mly"
    ( patB(_1, _3)@@at() )
# 1517 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 354 "parser.mly"
    ( VarB(_1, VarE(_1.it@@at())@@at())@@at() )
# 1524 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'head) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typparamlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 356 "parser.mly"
    ( VarB(_2, funE(_3, TypE(_5)@@ati 5)@@span[ati 3; ati 5])@@at() )
# 1533 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 358 "parser.mly"
    ( InclB(_2)@@at() )
# 1540 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bind) in
    Obj.repr(
# 360 "parser.mly"
    ( letB(_2, _4)@@at() )
# 1548 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 362 "parser.mly"
    ( doB(_2)@@at() )
# 1555 "parser.ml"
               : 'atbind))
; (fun __caml_parser_env ->
    Obj.repr(
# 370 "parser.mly"
    ( EmptyB@@at() )
# 1561 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atbind) in
    Obj.repr(
# 372 "parser.mly"
    ( _1 )
# 1568 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atbind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 374 "parser.mly"
    ( SeqB(_1, _3)@@at() )
# 1576 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'head) in
    Obj.repr(
# 379 "parser.mly"
    ( if _1.it = "_" then holeP@@at() else varP(_1)@@at() )
# 1583 "parser.ml"
               : 'atpat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'decon) in
    Obj.repr(
# 381 "parser.mly"
    ( strP(_2)@@at() )
# 1590 "parser.ml"
               : 'atpat))
; (fun __caml_parser_env ->
    Obj.repr(
# 383 "parser.mly"
    ( strP([])@@at() )
# 1596 "parser.ml"
               : 'atpat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patlist) in
    Obj.repr(
# 385 "parser.mly"
    ( match _2 with [p] -> p | ps -> tupP(ps)@@at() )
# 1603 "parser.ml"
               : 'atpat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typparamlist) in
    Obj.repr(
# 387 "parser.mly"
    ( annotP(varP(_3.it@@ati 3)@@ati 3,
        funT(_4, TypT@@ati 2, Pure@@ati 2)@@at())@@at() )
# 1612 "parser.ml"
               : 'atpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atpat) in
    Obj.repr(
# 392 "parser.mly"
    ( _1 )
# 1619 "parser.ml"
               : 'apppat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atpat) in
    Obj.repr(
# 394 "parser.mly"
    ( rollP(_3, _2)@@at() )
# 1627 "parser.ml"
               : 'apppat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atpat) in
    Obj.repr(
# 396 "parser.mly"
    ( rollP(_3, PathT(VarE(_2)@@ati 2)@@ati 2)@@at() )
# 1635 "parser.ml"
               : 'apppat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apppat) in
    Obj.repr(
# 400 "parser.mly"
    ( _1 )
# 1642 "parser.ml"
               : 'annpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annpat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 402 "parser.mly"
    ( annotP(_1, _3)@@at() )
# 1650 "parser.ml"
               : 'annpat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'apppat) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 404 "parser.mly"
    ( wrapP(_2, _4)@@at() )
# 1658 "parser.ml"
               : 'annpat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annpat) in
    Obj.repr(
# 408 "parser.mly"
    ( _1 )
# 1665 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annpat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'annpat) in
    Obj.repr(
# 410 "parser.mly"
    ( asP(_1, _3)@@at() )
# 1673 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pat) in
    Obj.repr(
# 414 "parser.mly"
    ( _1::[] )
# 1680 "parser.ml"
               : 'patlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patlist) in
    Obj.repr(
# 416 "parser.mly"
    ( _1::_3 )
# 1688 "parser.ml"
               : 'patlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pat) in
    Obj.repr(
# 421 "parser.mly"
    ( [(_1, _3)@@at()] )
# 1696 "parser.ml"
               : 'atdecon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 423 "parser.mly"
    ( [(_1, varP(_1.it@@at())@@at())@@at()] )
# 1703 "parser.ml"
               : 'atdecon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pat) in
    Obj.repr(
# 425 "parser.mly"
    ( [(_1, annotP(_5, _3)@@span[ati 2; ati 5])@@at()] )
# 1712 "parser.ml"
               : 'atdecon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 427 "parser.mly"
    ( [(_1, annotP(varP(_1.it@@ati 1)@@ati 1, _3)@@at())@@at()] )
# 1720 "parser.ml"
               : 'atdecon))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typparamlist) in
    Obj.repr(
# 429 "parser.mly"
    ( [(_2, annotP(varP(_2.it@@ati 2)@@ati 2,
        funT(_3, TypT@@ati 1, Pure@@ati 1)@@at())@@at())@@at()] )
# 1729 "parser.ml"
               : 'atdecon))
; (fun __caml_parser_env ->
    Obj.repr(
# 438 "parser.mly"
    ( [] )
# 1735 "parser.ml"
               : 'decon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atdecon) in
    Obj.repr(
# 440 "parser.mly"
    ( _1 )
# 1742 "parser.ml"
               : 'decon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atdecon) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'decon) in
    Obj.repr(
# 442 "parser.mly"
    ( _1 @ _3 )
# 1750 "parser.ml"
               : 'decon))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bind) in
    Obj.repr(
# 447 "parser.mly"
    ( StrE(_1)@@at() )
# 1757 "parser.ml"
               : Syntax.exp))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.exp)
;;
# 451 "parser.mly"
  
# 1784 "parser.ml"
